(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{187:function(a,s,t){"use strict";t.r(s);var r=t(0),n=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"类型签名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型签名","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型签名")]),a._v(" "),t("p",[a._v("Haskell 是 Static Type"),t("br"),a._v('\n并且 Haskell 支持类型推导, 比如写下一个数字，你就没必要另告诉 Haskell 说"它是个数字"，它自己能推导出来。')]),a._v(" "),t("h2",{attrs:{id:"查看类型-t"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看类型-t","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看类型 :t")]),a._v(" "),t("p",[a._v("使用 :t 命令后跟任何可用的表达式，即可得到该表达式的类型")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"HELLO!"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"HELLO!"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n")])])]),t("h2",{attrs:{id:"类型签名-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型签名-2","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型签名 "),t("code",[a._v("::")])]),a._v(" "),t("p",[a._v(':t 命令处理一个表达式的输出结果为表达式后跟 :: 及其类型，:: 读作"它的类型为"'),t("br"),a._v("\n同样，函数也有类型。编写函数时，给它一个明确的类型声明是个好习惯，比较短的函数就不用多此一举了")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("removeNonUppercase")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("removeNonUppercase")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("st")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("c")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("c")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("st")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("c")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("elem")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'A'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'Z'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("p",[a._v("多参数的函数, 参数之间由 -> 分隔，与回传值之间并无特殊差异。回传值是最后一项，")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("addThree")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("addThree")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v("\n")])])]),t("blockquote",[t("p",[a._v("如果你编写的函数拿不准它的类型是什么，可以先把函数体写出来，再使用 :t 命令测一下即可。函数也是表达式，:t 对函数同样适用。")])]),a._v(" "),t("h3",{attrs:{id:"类型变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型变量")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("head")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("head")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n")])])]),t("p",[a._v('a 可以是任意的类型, 它表示函数变量与类型无关，使用到类型变量的函数被称作"多态函数 "')]),a._v(" "),t("blockquote",[t("p",[a._v("类型变量可以使用多个字符， 但通常都是使用单个字符，如 a, b ,c ,d...")])]),a._v(" "),t("h3",{attrs:{id:"typeclasses-类型约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typeclasses-类型约束","aria-hidden":"true"}},[a._v("#")]),a._v(" Typeclasses 类型约束")]),a._v(" "),t("p",[a._v("如果类型属于某 Typeclass，那它必实现了该 Typeclass 所描述的行为， 及实现类型的接口")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Eq")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n")])])]),t("p",[a._v('=> 符号左边的部分叫做类型约束。我们可以这样阅读这段类型声明："相等函数取两个相同类型的值作为参数并回传一个布尔值，而这两个参数的类型同在 Eq 类之中(即类型约束)"')]),a._v(" "),t("blockquote",[t("p",[a._v("判断相等的==运算符是函数，"),t("code",[a._v("+-*/")]),a._v("之类的运算符也是同样。在缺省条件下，它们多为中缀函数。若要检查它的类型，就必须得用括号括起使之作为另一个函数，或者说以首码函数的形式调用它")])]),a._v(" "),t("h3",{attrs:{id:"eq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eq","aria-hidden":"true"}},[a._v("#")]),a._v(" Eq")]),a._v(" "),t("p",[a._v("包含可判断相等性的类型。提供实现的函数是 == 和 /=。所以，只要一个函数有 Eq 类的类型限制，那么它就必定在定义中用到了 == 和 /=。除函数以外的所有类型都属于 Eq，所以它们都可以判断相等性。")]),a._v(" "),t("h3",{attrs:{id:"ord"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ord","aria-hidden":"true"}},[a._v("#")]),a._v(" Ord")]),a._v(" "),t("p",[a._v("包含可比较大小的类型。Ord 包中包含了<, >, <=, >= 之类用于比较大小的函数。compare 函数取两个 Ord 类中的相同类型的值作参数, 返回 "),t("code",[a._v("GT")]),a._v(", "),t("code",[a._v("LT")]),a._v(", "),t("code",[a._v("EQ")]),a._v(" 这三种类型的比较的结果。除了函数以外，我们目前所了解到的所有类型都属于 Ord 类。类型若要成为 Ord 的成员，必先加入 Eq 家族。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Abrakadabra"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Zebra"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Abrakadabra"')]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("compare")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Zebra"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LT")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("compare")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("GT")]),a._v("\n")])])]),t("h2",{attrs:{id:"show"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show","aria-hidden":"true"}},[a._v("#")]),a._v(" Show")]),a._v(" "),t("p",[a._v("Show 的成员为可用字符串表示的类型。目前为止，除函数以外的所有类型都是 Show 的成员。操作 Show Typeclass，最常用的函数表示 show。它可以取任一 Show 的成员类型并将其转为字符串,有点类似其它语言中的 tostring。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"3"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.334")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"5.334"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"True"')]),a._v("\n")])])]),t("h2",{attrs:{id:"read"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#read","aria-hidden":"true"}},[a._v("#")]),a._v(" Read")]),a._v(" "),t("p",[a._v("Read 是与 Show 相反的 Typeclass。"),t("br"),a._v("\nread 函数可以将一个字符串转为 Read 的某成员类型。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"True"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"8.2"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.8")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("12.0")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"5"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[1,2,3,4]"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n")])])]),t("p",[a._v("read 函数 返回 ReadTypeclass，但我们如果用不到这个值，它就永远都不会得知该表达式的具体类型"),t("br"),a._v('\n比如直接尝试 read "4"，ghci 是不清楚我们想要返回值的类型， 我们需要在一个表达式后跟:: 的类型注释，以明确其类型')]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"5"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"5"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.0")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"5"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.0")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[1,2,3,4]"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("\"(3, 'a')\"")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("h2",{attrs:{id:"enum"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enum","aria-hidden":"true"}},[a._v("#")]),a._v(" Enum")]),a._v(" "),t("p",[a._v("Enum 的成员都是连续的类型 ,也就是可枚举"),t("br"),a._v("\nEnum 类存在的主要好处就在于我们可以在 Range 中用到它的成员类型：每个值都有后继子 (successer) 和前置子 (predecesor)，分别可以通过 succ 函数和 pred 函数得到。该 Typeclass 包含的类型有：(), Bool, Char, Ordering, Int, Integer, Float 和 Double。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'e'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"abcde"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LT")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("GT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("EQ")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("GT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("succ")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'B'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'C'")]),a._v("\n")])])]),t("h2",{attrs:{id:"bounded"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bounded","aria-hidden":"true"}},[a._v("#")]),a._v(" Bounded")]),a._v(" "),t("p",[a._v("Bounded 的成员都有一个上限和下限。"),t("br"),a._v("\nminBound 和 maxBound 函数，它们的类型都是 (Bounded a) => a。可以说，它们都是多态常量。"),t("br"),a._v("\n如果其中的项都属于 Bounded Typeclass，那么该 Tuple 也属于 Bounded")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("minBound")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2147483648")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("maxBound")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'\\1114111'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("maxBound")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("minBound")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("maxBound")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2147483647")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'\\1114111'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("h2",{attrs:{id:"num"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#num","aria-hidden":"true"}},[a._v("#")]),a._v(" Num")]),a._v(" "),t("p",[a._v("Num 是表示数字的 Typeclass，它的成员类型都具有数字的特征。"),t("br"),a._v("\n所有的数字都是多态常量，它可以作为所有 Num Typeclass 中的成员类型。类型只有亲近 Show 和 Eq，才可以加入 Num。")]),a._v(" "),t("p",[a._v("比如：")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Num")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n")])])]),t("p",[t("code",[a._v("*")]),a._v(" 运算符它只取两个相同类型的参数。所以 "),t("code",[a._v("(5 :: Int) - (6 :: Integer)")]),a._v(" 会引发一个类型错误，而 "),t("code",[a._v("5 - (6 :: Integer)")]),a._v(" 就不会有问题。")]),a._v(" "),t("h2",{attrs:{id:"integral"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#integral","aria-hidden":"true"}},[a._v("#")]),a._v(" Integral")]),a._v(" "),t("p",[a._v("Integral 同样是表示数字的 Typeclass。Num 包含所有的数字：实数和整数。而 Integral 仅包含整数，其中的成员类型有 Int 和 Integer")]),a._v(" "),t("h2",{attrs:{id:"floating"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#floating","aria-hidden":"true"}},[a._v("#")]),a._v(" Floating")]),a._v(" "),t("p",[a._v("Floating 仅包含浮点类型：Float 和 Double"),t("br"),a._v("\nfromIntegral 函数在处理数字时会非常有用,类型声明为： fromIntegral :: (Num b, Integral a) => a -> b"),t("br"),a._v("\n它取一个整数做参数并回传一个更加通用的数字，这在同时处理整数和浮点时会尤为有用")])])}],!1,null,null,null);s.default=n.exports}}]);