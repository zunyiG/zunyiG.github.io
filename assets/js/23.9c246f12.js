(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{182:function(a,s,t){"use strict";t.r(s);var n=t(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"构建-类型-类型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建-类型-类型类","aria-hidden":"true"}},[a._v("#")]),a._v(" 构建 类型 类型类")]),a._v(" "),t("h2",{attrs:{id:"抽象数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象数据类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 抽象数据类型")]),a._v(" "),t("p",[a._v("我们可以使用 data 关键字来定义 类型")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Bool 在标准库中的定义")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2147483648")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2147483647")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2147483647")]),a._v("\n")])])]),t("p",[a._v("构造一个表示图形的类型， 假设包含圆和矩形")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("React")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v("\n")])])]),t("h3",{attrs:{id:"构造函数与类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数与类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 构造函数与类型")]),a._v(" "),t("p",[a._v("data 类似java的class，通过等号后面构造函数，创建出对应类型的值对象，它的类型即为等号前面的类型"),t("br"),a._v("\n一个类型，可以有多个值构造函数, 模式匹配时使用值构造函数进行匹配。")]),a._v(" "),t("p",[a._v("类型 Circle， React 其实可以理解为构造函数 本质也是一个函数，它的类型为")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("React")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("React")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v("\n")])])]),t("h3",{attrs:{id:"计算图形面积的函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算图形面积的函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 计算图形面积的函数")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("pi")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("React")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("abs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("abs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("blockquote",[t("p",[a._v("需要注意的是这里不可以以写成 Circle -> Float 因为 Circle 并不是真正的类型,类似不可以写 True -> False\n如果使用模式匹配针对的都是构造函数， 类似的包括之前用过的 [], False, 5, 他们都是构造函数只是不包含参数而已")])]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.1415927")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("React")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20000.0")]),a._v("\n")])])]),t("h3",{attrs:{id:"deriving-派生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deriving-派生","aria-hidden":"true"}},[a._v("#")]),a._v(" deriving 派生")]),a._v(" "),t("p",[a._v("如果要将Circle 输出到控制台， 我们可以让Circle 成为show类型类 的子类型 ( 使用 deriving（派生）)")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Rectangle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.0")]),a._v("\n")])])]),t("h3",{attrs:{id:"作为函数使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作为函数使用","aria-hidden":"true"}},[a._v("#")]),a._v(" 作为函数使用")]),a._v(" "),t("p",[a._v("因为构造函数也是函数，所以我们可以把它当成普通函数来使用")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("h3",{attrs:{id:"使用子类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用子类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用子类型")]),a._v(" "),t("p",[a._v("我们还可以在定义类型的时候使用其它子类型")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Rectangle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("blockquote",[t("p",[a._v("这里Point 类型的构造函数和自己的类型名字相同，虽然名字相同但它们是两个东西， 一个是表示类型，一个为构造函数")])]),a._v(" "),t("p",[a._v("计算函数做对应修改")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("pi")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Rectangle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("abs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("abs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),t("p",[a._v("还可以定义辅助函数来帮助创建")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("baseCircle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("baseCircle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Circle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("baseRect")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("baseRect")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("width")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("height")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Rectangle")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("width")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("height")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("h3",{attrs:{id:"类型导出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型导出","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型导出")]),a._v(" "),t("p",[a._v("类型的导出类似于模块的导出")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("module")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shapes")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Point")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Shape")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("surface")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("nudge")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("baseCircle")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("baseRect")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n")])])]),t("p",[a._v("我们可以选择不导出任何 Shape 的值构函数，这一来使用我们模块的人就只能用辅助函数 baseCircle 和 baseRect 来得到 Shape 了。Data.Map 就是这一套，没有 Map.Map [(1,2),(3,4)] 而是使用Map.fromList 这样的辅助函数得到 map")]),a._v(" "),t("h2",{attrs:{id:"记录表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记录表达式","aria-hidden":"true"}},[a._v("#")]),a._v(" 记录表达式")]),a._v(" "),t("p",[a._v("如果我们需要表述一个人的 姓、名、年龄、身高、电话号码等"),t("br"),a._v("\n如果直接表示 "),t("code",[a._v("data Person = Person String String Int Float String String deriving (Show)")]),a._v(" 在构建和取数据时会非常麻烦"),t("br"),a._v("\n这时我们可以使用 Record")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("firstName")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("lastName")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("age")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("height")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phone")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("flavor")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("通过 Record Syntax，Haskell 会自动生这些函数：firstName, lastName, age, height, phoneNumber 和 flavor。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("flavor")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("flavor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("firstName")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("firstName")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n")])])]),t("p",[a._v("同时在构造方式和打印内容上也有区别")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Car")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Car")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("company")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("model")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("year")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Car")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("year")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1967")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("company")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Ford"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("model")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Mustang"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Car")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("company")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Ford"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("model")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Mustang"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("year")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1967")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h2",{attrs:{id:"类型参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型参数","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型参数")]),a._v(" "),t("p",[a._v("使用类型参数，在通过构造函数传入的参数的类型，决定了构造出的值的类型"),t("br"),a._v("\n同时在使用类型时，可以通过传入类型参数，来决定构造函数传入的数据类型")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n")])])]),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Haha"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Haha"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("84")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("84")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Haha"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Haha"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("84")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("84")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Num")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Double")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),a._v("\n")])])]),t("blockquote",[t("p",[a._v("这里 Nothing 的类型为 Maybe a，所以函数的参数类型 不论是Maybe Int 还是 Maybe Chart 都可以传入 Nothing\n就像 5 可以是 Int 也可以是 Double， 空List [] 的类型是 [a]")])]),a._v(" "),t("p",[a._v("使用类型参数，我们可以构造出不关心我们要处理的值的具体类型的数据类型，使我们的类型更加通用。"),t("br"),a._v("\n比如说一个容器类型，就和适合定义为包含类型参数的类型，但是并不是所有类型都适合定义为需要传入类型参数的类型，比如用来描述具体对象的类型如Car")]),a._v(" "),t("h3",{attrs:{id:"添加类型约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加类型约束","aria-hidden":"true"}},[a._v("#")]),a._v(" 添加类型约束")]),a._v(" "),t("p",[a._v("我们还可以在类型参数上加上类型约束，比如")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Ord")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("v")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("\n")])])]),t("p",[a._v("但是在haskell中并不建议这样去做，因为使用时不论我们需不需要用到约束我们都需要加上约束。其实完全可以在使用时加到类型签名中")]),a._v(" "),t("h2",{attrs:{id:"派生实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#派生实例","aria-hidden":"true"}},[a._v("#")]),a._v(" 派生实例")]),a._v(" "),t("p",[a._v("类型类就是定义了某些行为的接口  （它与类不同，更加类似于接口）\n比如 Eq 类就定义了判定相等性的行为，Int类型是它的实例，所以Int的值可以判断相等性")]),a._v(" "),t("p",[a._v("前面提到的派生关键字 deriving, 可以在我们构建类型时自动地给我们的类型加上相应的行为"),t("br"),a._v("\n它们一般都是基于构造函数来做的相应行为，比如Eq 比较大小，构造函数在前面的对应值的大小要小于后面的值,所以False 一定比 True 小")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Ord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("compare")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("GT")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n")])])]),t("p",[a._v("而类似于 Just (*3) > Just ("),t("em",[a._v("2) 这样的比较是不行的，因为")]),a._v("3 *2 都是函数，而函数不属于Ord类 不能比较")]),a._v(" "),t("h2",{attrs:{id:"类型别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型别名","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型别名")]),a._v(" "),t("p",[a._v("类型别名可以给类型提供了不同的名字，让我们的代码更容易理解"),t("br"),a._v("\n在写类型签名时 "),t("code",[a._v("[Char]")]),a._v(" 和 "),t("code",[a._v("String")]),a._v(" 等价，可以互换。这就是由类型别名实现的。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PhoneNumber")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PhoneBook")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PhoneNumber")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("inPhoneBook")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PhoneNumber")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PhoneBook")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("inPhoneBook")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("pnumber")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("pbook")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("pnumber")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("elem")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("pbook")]),a._v("\n")])])]),t("p",[a._v("这里如果不用类型别名，我们函数的类型声明就只能是 String -> String -> [(String ,String)] -> Bool 了。在这里使用类型别名是为了让类型声明更加易读")]),a._v(" "),t("h3",{attrs:{id:"类型别名也是可以有参数的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型别名也是可以有参数的","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型别名也是可以有参数的")]),a._v(" "),t("p",[a._v("比如想表示一个可以接受任意类型的list")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("AssocList")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("v")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("v")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("h3",{attrs:{id:"不全调用类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不全调用类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 不全调用类型")]),a._v(" "),t("p",[a._v("用不全的类型参数调用类型构造函数就可以得到一个不全调用的类型构造函数（类型构造函数不同于值构造函数，它是用于对类型的构造）")]),a._v(" "),t("p",[a._v("如果我们要一个表示从整数到某东西间映射关系的类型")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IntMap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("v")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("v")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- 或者")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IntMap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n")])])]),t("p",[a._v("如果要使用它，你可以用 qualified import 来导入 Data.Map。这时，类型构造函数前面必须得加上模块名。所以应该写个 type IntMap = Map.Map Int")]),a._v(" "),t("blockquote",[t("p",[a._v("类型构造函数和值构造函数的区别, 类型构造函数是用来构造具体类型的(等号前面那个), 值构造函数用来构造类型所对的值(等号后面的)")])]),a._v(" "),t("h3",{attrs:{id:"either"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#either","aria-hidden":"true"}},[a._v("#")]),a._v(" Either")]),a._v(" "),t("p",[a._v("Maybe 是最常见的表示可能失败的计算的类型了, 但是Maybe有一个不足就是它只能表示失败了，失败的原因是办法表示的，不能携带更多的信息"),t("br"),a._v("\n当我们需要知道具体的原因的时候，就需要使用 Either了，它用 a 来表示可能的错误的类型，用 b 来表示一个成功运算的类型， 即错误一律用 Left 值构造函数，而结果一律用 Right")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Left")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Right")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Eq")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Ord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Read")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("h2",{attrs:{id:"递归结构类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归结构类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 递归结构类型")]),a._v(" "),t("p",[a._v("当一个类型的构造函数使用了自己的类型时，它就是递归结构类型")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Read")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Eq")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Ord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("这里构造函数 Cons 的第二个参数使用了List a 类型，即list里面还可以放入list， 这个放入的list可以是 Empty 也可以是另一个list")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Empty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("h2",{attrs:{id:"类型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型类","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型类")]),a._v(" "),t("p",[a._v("类型类 类似于接口， 它定义了一些行为（如 比较 排序 打印）， 我们会把满足这类性质的类型定义为该类型类的实例"),t("br"),a._v("\ntypeClass 的行为是由定义的函数来描述")]),a._v(" "),t("p",[a._v("Eq 的定义")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Eq")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("{-# MINIMAL (==) | (/=) #-}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Defined in ‘GHC.Classes’")]),a._v("\n")])])]),t("p",[a._v("这里的 a 就是我在定义实例时的类型，minimal 是要实现的最少的函数")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TrafficLight")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Yellow")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Green")]),a._v("\n")])])]),t("h3",{attrs:{id:"实现一个类型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个类型类","aria-hidden":"true"}},[a._v("#")]),a._v(" 实现一个类型类")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Eq")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TrafficLight")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Green")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Green")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Yellow")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Yellow")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n")])])]),t("p",[a._v("在实现时我们使用 instance 关键字来定义 Eq的实例， 这里的TrafficLight就是class 那里的a"),t("br"),a._v("\n这里我们只实现了 ==，这里也使用了模式匹配")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TrafficLight")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Red light"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Yellow")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Yellow light"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Green")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Green light"')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Yellow")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v(" `"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("elem")]),a._v("` "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Yellow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Green")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Yellow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Green")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Red")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("light")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Yellow")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("light")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Green")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("light")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("h3",{attrs:{id:"子类型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子类型类","aria-hidden":"true"}},[a._v("#")]),a._v(" 子类型类")]),a._v(" "),t("p",[a._v("typeclass 定义成其他 typeclass 的 subclass（子类型类）")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Eq")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Num")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("\n")])])]),t("p",[a._v("这里我们使用了类型约束， 类型约束（Eq a）可以在很多地方去使用。"),t("br"),a._v("\n这里的表述就相当于，在一个类型实现Num类型类前，必须先实现Eq类型类\n相当于我们在使用Num类型类的类型时，它的值默认是可以使用 == 作比较的")]),a._v(" "),t("h3",{attrs:{id:"类型构造函数实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型构造函数实现","aria-hidden":"true"}},[a._v("#")]),a._v(" 类型构造函数实现")]),a._v(" "),t("p",[a._v("类似于Maybe这种 不是一个具体类型，而属于一个类型构造函数的,可以这样定义")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Eq")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Eq")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n")])])]),t("p",[a._v("我们可以先给类型构造函数传入一个参数，使之成为具体的类型 Maybe m"),t("br"),a._v("\n同时我们要比较Maybe里面的元素相等， 所以对于参数m也必须是Eq类型类下的(Eq m)")]),a._v(" "),t("blockquote",[t("p",[a._v("这里需要注意区分, 类型类的类型约束是限制需要的子类型, 类型类实现的类型约束是限制要实现的类型的限制\n使用:info 可以查看类型、类型类的信息")])]),a._v(" "),t("h2",{attrs:{id:"构建自己的类型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建自己的类型类","aria-hidden":"true"}},[a._v("#")]),a._v(" 构建自己的类型类")]),a._v(" "),t("p",[a._v("通过类型类来实现javascript 的Boolean默认类型转换")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- 定义类型类")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("YesNo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n")])])]),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("YesNo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- [a]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("YesNo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Bool")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("YesNo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("id")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Maybe a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("YesNo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n")])])]),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("length")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"haha"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yesno")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n")])])]),t("h2",{attrs:{id:"函子类型类（functor-typeclass）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函子类型类（functor-typeclass）","aria-hidden":"true"}},[a._v("#")]),a._v(" 函子类型类（Functor typeClass）")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n")])])]),t("p",[a._v("函子类型类描述的是可以被map的类型。"),t("br"),a._v("\n它有点类似一个容器，接收一个方法和一个容器，通过方法映射容器值，然后返回另一个容器")]),a._v(" "),t("p",[a._v("像Maybe这样的容器，是这样定义对functor的实现的")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n")])])]),t("p",[a._v("这里的Maybe 就是前面的f a, f b， 这里的f 它只对Just做出操作")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("400")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n")])])]),t("p",[a._v("对于Either这样有两个参数的类型， 我们需要先做一个不完全调用，放回需要一个参数的类型"),t("br"),a._v("\n对于 Right 我们需要map，对于Left我们不需要map")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Right")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Right")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Left")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Left")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n")])])]),t("p",[a._v("至于为什么只对Right 做map，可以看下定义，它的Right才是包含值的，而Left仅仅是作为对错误的反馈")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Left")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Right")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n")])])]),t("h2",{attrs:{id:"kind-（类型的类型）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kind-（类型的类型）","aria-hidden":"true"}},[a._v("#")]),a._v(" kind （类型的类型）")]),a._v(" "),t("p",[a._v("类型构造函数接受其他类型作为他的参数，来构造出一个具体类型。这样的行为会让我们想到函数，也是接受一个值当作参数，并返回另一个值。"),t("br"),a._v('\n任何值都有自己的类型，如 3 "ok" take 他们都有自己的类型，可以把类型看作一个标签，值会带着这个标签，这样我们就可以推断它的性质。')]),a._v(" "),t("p",[a._v("但是类型它也有自己的标签 Kind， 它就是类型的类型， 我们可以用:k 来查询类型的Kind")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("\n")])])]),t("p",[t("code",[a._v("*")]),a._v(" 代表这个类型是具体类型， 这里Int是具体类型，所以它没有任何参数")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("\n")])])]),t("p",[a._v("而对于Maybe ，它需要接收另一个类型来构造出一个具体类型， 如 Maybe Int 它的类型就是 "),t("code",[a._v("*")]),a._v(" 具体类型")]),a._v(" "),t("h3",{attrs:{id:"kind-不完全调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kind-不完全调用","aria-hidden":"true"}},[a._v("#")]),a._v(" kind 不完全调用")]),a._v(" "),t("p",[a._v("由于kind 也是函数，所以我们可以不完全调用它，来生成一个新的类型构造函数")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("\n")])])]),t("p",[a._v("这里的Either 需要接收两个参数在返回一个类型，传入一个类型时返回了一个 "),t("code",[a._v("* -> *")]),a._v(" 构造函数")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<$")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("{-# MINIMAL fmap #-}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Defined in ‘GHC.Base’")]),a._v("\n")])])]),t("p",[a._v("回到前面的Functor 定义中，通过:info 查看Functor。这里如果要实现Functor的实例，需要传入的 f 类型的 kind 为 "),t("code",[a._v("* -> *")]),a._v(",\n对应到下面的fmap中, 这里的 f a 再传入一个参数就成了具体的类型了")]),a._v(" "),t("p",[a._v("比如下面这个例子，t类型的kind就是 "),t("code",[a._v("* -> (* -> *) -> *")]),a._v(", j 的kind 为 "),t("code",[a._v("* -> *")])]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Tofu")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("tofu")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("j")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("j")]),a._v("\n")])])]),t("h3",{attrs:{id:"练习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习","aria-hidden":"true"}},[a._v("#")]),a._v(" 练习")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Barry")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("p")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Barry")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yabba")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("p")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dabba")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Barry")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Barry")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("\n")])])]),t("p",[a._v("这里的 Barry 接受三个类型参数，所以会是 "),t("code",[a._v("something -> something -> something -> *")]),a._v("。p 是一个具体类型因此是 "),t("code",[a._v("*")]),a._v("。至于 k，我们假设他是 "),t("code",[a._v("*")]),a._v("，所以 t 会是 "),t("code",[a._v("* -> *")]),a._v("。现在我们把这些代入 something，所以 kind 就变成 "),t("code",[a._v("(* -> *) -> * -> * -> *")]),a._v("。")]),a._v(" "),t("p",[a._v("如果我们要把它定义为一个 Functor 的实例，我们必须先 partially apply 头两个类型参数，这样我们就会是 "),t("code",[a._v("* -> *")]),a._v(" 的 kind。这代表 instance 定义会是 instance Functor (Barry a b) where。如果我们看 fmap 针对 Barry 的类型，也就是把 f 代换成 Barry c d，那就会是 fmap :: (a -> b) -> Barry c d a -> Barry c d b。第三个 Barry 的类型参数是对于任何类型, 我们把 f map 到第一个字段:")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Barry")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Barry")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yabba")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dabba")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Barry")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("yabba")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dabba")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])}],!1,null,null,null);s.default=r.exports}}]);