(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{181:function(a,s,t){"use strict";t.r(s);var n=t(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"输入输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输入输出","aria-hidden":"true"}},[a._v("#")]),a._v(" 输入输出")]),a._v(" "),t("p",[a._v("由于haskell 是一门纯函数式编程语言，函数不能够去改变状态的。 函数唯一能做的就是根据参数返回结果，如果用相同参数去调用同一个函数两次得到的结果是相同的。这在命令式语言中看起来是非常大的限制，但是在函数式给我们带来了很多的益处。")]),a._v(" "),t("p",[a._v("但是同时这也给我们带来了一个问题，我们无法改变现实世界的状态，比如打印一个计算结果。不过haskell设计了一个非常聪明的系统来处理有副作用的函数，它漂亮地将我们的程序区分成纯粹跟非纯粹两部分，非纯粹的部分负责跟键盘还有屏幕沟通。有了这种机制，在跟外界沟通的同时，我们还是能够有效运用纯粹所带来的好处，像是惰性求值、容错性跟模块性。")]),a._v(" "),t("h2",{attrs:{id:"hello-world"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hello-world","aria-hidden":"true"}},[a._v("#")]),a._v(" hello world")]),a._v(" "),t("p",[a._v("我们可以创建一个文件，包含以下内容")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello, world"')]),a._v("\n")])])]),t("p",[a._v("然后通过ghc编译")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghc")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--make helloworld")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("of")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Compiling")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Main")]),a._v("                 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("helloworld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hellowowlrd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("o")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Linking")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("helloworld")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("\n")])])]),t("p",[a._v("最后在运行, 最后将打印出字串到屏幕的程序")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("./")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("helloworld")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("world")]),a._v("\n")])])]),t("p",[a._v("putStrLn 用于向屏幕打印值， 它接受一个String 类型的参数，返回一个IO action， 这个IO action 包含了一个 （）形态即 Tuple")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello, world"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello, world"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),t("p",[a._v("一个 I/O action 是一个会造成副作用的动作，常是指读取输入或输出到屏幕，同时也代表会回传某些值。在屏幕打印出几个字串并没有什么有意义的回传值可言，所以这边用一个 () 来代表。 一个 I/O action 会在我们把它绑定到 main 这个名字并且执行程序的时候触发。")]),a._v(" "),t("h2",{attrs:{id:"do-block"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#do-block","aria-hidden":"true"}},[a._v("#")]),a._v(" do block")]),a._v(" "),t("p",[a._v("把整个程序限制在只能有一个 I/O action 看似是个极大的限制。这就是为什么我们需要 do 表示法来将所有 I/O action 绑成一个。来看看下面这个例子。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, what\'s your name?"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hey "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('", you rock!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("程序每一步都是一个 I/O action。将所有 I/O action 用 do 绑在一起变成了一个大的 I/O action\n这个大的 I/O action 的类型是 IO ()，这是由最后一个 I/O action 所决定的。按照惯例，我们通常不会把 main 的型态在程序中写出来。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n")])])]),t("h3",{attrs:{id:"取值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#取值","aria-hidden":"true"}},[a._v("#")]),a._v(" 取值")]),a._v(" "),t("p",[a._v("getLine 是一个回传 String 的 I/O action, 它会等待用户的输入。"),t("br"),a._v("\nname <- getLine 这句的作用是执行一个 I/O action getLine 并将它的结果绑定到 name。\n要获得 I/O的数据唯一办法就是用 <-， 要从 I/O action 拿出某些数据，就一定同时要在另一个 I/O action 中，这就是 Haskell 如何分开纯跟不纯的程序的方法。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, what\'s your name?"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hey "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('", you rock!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("每个 I/O action 都有一个值封装在里面，另外最后一个 action 不能绑定任何名字。\nfoo 只会有一个 () 的值，所以绑定到 foo 这个名字似乎是多余的，所以我们宁愿写成 putStrLn something")]),a._v(" "),t("p",[a._v("你能够在 do blocks 中使用 let 绑定")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token import_statement"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Data.Char")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"What\'s your first name?"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("firstName")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"What\'s your last name?"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("lastName")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("bigFirstName")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("toUpper")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("firstName")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("bigLastName")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("toUpper")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("lastName")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hey "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("bigFirstName")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("bigLastName")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('", how are you?"')]),a._v("\n")])])]),t("p",[a._v("当你要绑定 I/O actions 的结果时用 <-，而对于纯粹的 expression 使用 let 绑定。对于错误的 let firstName = getLine，我们只不过是把 getLine 这个 I/O actions 给了一个不同的名字罢了， 其实可以将IO 理解为一个容器，它负责存放我们与外界交互的操作")]),a._v(" "),t("p",[a._v("现在我们来写一个会一行一行不断地读取输入，并将读进来的字反过来输出到屏幕上的程序。程序会在输入空白行的时候停止。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("null")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("reverseWords")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("reverseWords")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("reverseWords")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("unwords")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(" . ")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("reverse")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(" . ")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("words")]),a._v("\n")])])]),t("p",[a._v("我们用 getLine 从终端读取了一行，并把这行输入取名叫 line。然后接着一个条件式 expression。当 if 的条件是 true （也就是输入了一个空白行），我们便执行一个 I/O action，如果 if 的条件是 false，那 else 底下的 I/O action 被执行,由于我们在 else 中只能有一个 I/O action，所以我们用 do 来将两个 I/O actions 绑成一个,")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("reverseWords")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("在 do block 里面，我们依序调用了 getLine 以及 reverseWords， 然后递归调用了 main，\n由于 main 也是一个 I/O action,调用 main 也就代表我们回到程序的起点。")]),a._v(" "),t("h3",{attrs:{id:"return"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#return","aria-hidden":"true"}},[a._v("#")]),a._v(" return")]),a._v(" "),t("p",[a._v("then 的区块即 then return ()被执行时， 这里 return 在 Haskell 里面的意义跟其它语言的 return 完全不同的。\n在 Haskell 中，它的作用是利用某个 pure value 造出 I/O action， 相当于我们把值又装进了IO 容器。")]),a._v(" "),t("p",[a._v("在 I/O do block 中放一个 return 并不会结束执行。像下面这个程序会执行到底。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"HAHAHA"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"BLAH BLAH BLAH"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v("\n")])])]),t("p",[a._v("我们能用 <- 与 return 来达到绑定名称的目的。return 与 <- 作用相反。return 把 value 装进盒子中，而 <- 将 value 从盒子拿出来，并绑定一个名称, 不过这样做显得有些多余，应为 你可以用 let 绑定")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hell"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"yeah!"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n")])])]),t("h2",{attrs:{id:"putstr-putchar-print"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#putstr-putchar-print","aria-hidden":"true"}},[a._v("#")]),a._v(" putStr putChar print")]),a._v(" "),t("p",[a._v("在除了 putStrLn 之外，还有很多可以处理 IO 的函数。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putChar")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("putStr 的边界条件是空字串，所以假设我们打印一个空字串，那它只是回传一个什么都不做的 I/O action，像 return ()。如果打印的不是空字串，那就先用 putChar 打印出字串的第一个字符，然后再用 putStr 打印出字串剩下部份。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("print 接受任何是 Show typeclass 的 instance 的型态的值，这代表我们知道如何用字串表示它，调用 show 来将值变成字串然后将其输出到终端上。它相当于是 putStrLn . show 的组合, GHCI 实际上就是用了 print 来将这些值输出到终端")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"haha"')]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.2")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runhaskell")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("print_test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hs")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"haha"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("h2",{attrs:{id:"getchar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getchar","aria-hidden":"true"}},[a._v("#")]),a._v(" getChar")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getChar")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Char")]),a._v("\n")])])]),t("p",[a._v("getChar 是一个从输入读进一个字符的 I/O action")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token import_statement"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Control.Monad")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("c")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getChar")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("when")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("c")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("' '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putChar")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("c")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v("\n")])])]),t("p",[a._v("when 这函数可以在 Control.Monad 中找到它, 它看起来像一个控制流的 判断语句， 但它实际上是一个函数， 值是 True，便放回给它的 I/O action。如果值是 False 放回 return ()。 它相当于是 if something then do some I/O action else return ()")]),a._v(" "),t("h2",{attrs:{id:"sequence-mapm-mapm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sequence-mapm-mapm","aria-hidden":"true"}},[a._v("#")]),a._v(" sequence mapM mapM_")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("sequence")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("c")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("c")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- 用 sequence 可以改成")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("rs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("sequence")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("rs")]),a._v("\n")])])]),t("p",[a._v("sequence 接受一串 I/O action，并回传一个会依序执行它们的 I/O action")]),a._v(" "),t("p",[a._v("一个常见的使用方式是我们将 print 或 putStrLn 之类的函数 map 到串列上。map print [1,2,3,4] 这个动作并不会产生一个 I/O action，而是一串 I/O action，就像是 [print 1, print 2, print 3, print 4]。如果我们将一串 I/O action 变成一个 I/O action，我们必须用 sequence")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("sequence")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("p",[a._v("由于 先map 再 sequence 这个动作太常用了，所以有一些函数在函式库中 mapM 跟 mapM_, mapM_的区别是，它会把运算的结果丢掉，在我们不关心 I/O action 结果的情况下，mapM_ 是最常被使用的。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("mapM")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ghci")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("mapM_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),t("h2",{attrs:{id:"forever"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#forever","aria-hidden":"true"}},[a._v("#")]),a._v(" forever")]),a._v(" "),t("p",[a._v("forever 接受一个 I/O action 并回传一个永远作同一件事的 I/O action。你可以在 Control.Monad 中找到它。\n下面的程序会不断地要用户输入些东西，并把输入的东西转成大写输出到屏幕上。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token import_statement"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Control.Monad")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token import_statement"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Data.Char")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forever")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Give me some input: "')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("l")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("map")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("toUpper")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("l")]),a._v("\n")])])]),t("p",[a._v("在 Control.Monad 中的 forM 跟 mapM 的作用一样，只是参数的顺序相反而已。第一个参数是串列，而第二个则是函数")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token import_statement"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Control.Monad")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("colors")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forM")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Which color do you associate with the number "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"?"')]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("color")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("color")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"The colors that you associate with 1, 2, 3 and 4 are: "')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("mapM")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("colors")]),a._v("\n")])])]),t("p",[a._v("(\\a -> do ...) 是接受一个数字并回传一个 I/O action 的函数, 可以把 forM 的意思想成将串列中的每个元素作成一个 I/O action。至于每个 I/O action 实际作什么就要看原本的元素是什么。然后，执行这些 I/O action 并将结果绑定到某个名称上。或是直接将结果忽略掉。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runhaskell")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("from_test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hs")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Which")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("color")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("you")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("associate")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("the")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("white")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Which")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("color")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("you")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("associate")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("the")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("blue")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Which")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("color")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("you")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("associate")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("the")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("red")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Which")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("color")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("you")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("associate")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("the")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("orange")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("The")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("colors")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("that")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("you")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("associate")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("and")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("are")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("white")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("blue")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("red")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("orange")]),a._v("\n")])])]),t("p",[a._v("其实我们也不是一定要用到 forM，只是用了 forM 程序会比较容易理解。正常来讲是我们需要在 map 跟 sequence 的时候定义 I/O action 的时候使用 forM，同样地，我们也可以将最后一行写成 forM colors putStrLn。")]),a._v(" "),t("p",[a._v("不要把像是 putStrLn 的函式想成接受字串并输出到屏幕。要想成一个函式接受字串并回传一个 I/O action。当 I/O action 被执行的时候，会漂亮地打印出你想要的东西。")]),a._v(" "),t("h2",{attrs:{id:"文件与字符流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件与字符流","aria-hidden":"true"}},[a._v("#")]),a._v(" 文件与字符流")]),a._v(" "),t("h3",{attrs:{id:"getcontents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getcontents","aria-hidden":"true"}},[a._v("#")]),a._v(" getContents")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getContents")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n")])])]),t("p",[a._v("getContents 是一个从标准输入读取直到 end-of-file 字符的 I/O action, getContents 是惰性 I/O (Lazy I/O)。当我们写了 foo <- getContents，他并不会马上读取所有输入，将他们存在 memory 里面。他只有当你真的需要输入数据的时候才会读取。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("contents")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getContents")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLinesOnly")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("contents")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLinesOnly")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLinesOnly")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("input")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("allLines")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("lines")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("input")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLines")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("filter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("length")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("allLines")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("result")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("unlines")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLines")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("result")]),a._v("\n")])])]),t("p",[a._v("程序读取输入，并打印出少于十个字符的行。"),t("br"),a._v('\n比如 "short\\nlooooooooooooooong\\nshort again"， 这字串有三行用 lines 把字串分成 ["short", "looooooooooooooong", "short again"]， 然后过滤这些字串 得到["short", "short again"]，最后用 unlines 把这些字串用换行接起来，形成 "short\\nshort again"')]),a._v(" "),t("h3",{attrs:{id:"interact"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interact","aria-hidden":"true"}},[a._v("#")]),a._v(" interact")]),a._v(" "),t("p",[a._v("由于上面这个过程十分常用，所以创建了 interact 函数。 interact 接受一个 String -> String ，并返回 I/O action。")]),a._v(" "),t("div",{staticClass:"language-haskell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-haskell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("interact")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLinesOnly")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLinesOnly")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLinesOnly")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("input")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("allLines")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("lines")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("input")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLines")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("filter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("length")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("allLines")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("result")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("unlines")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("shortLines")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("result")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- 还可以简化为")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("interact")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("unlines")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(" . ")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("filter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(" . ")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(" . ")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("lines")]),a._v("\n")])])]),t("h3",{attrs:{id:"标准输入-输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准输入-输出","aria-hidden":"true"}},[a._v("#")]),a._v(" 标准输入/输出")])])}],!1,null,null,null);s.default=e.exports}}]);